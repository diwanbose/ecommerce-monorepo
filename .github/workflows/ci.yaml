name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: make install-deps

      - name: Run Go linters
        run: make lint-go

      - name: Run documentation linters
        run: make lint-docs

      - name: Run API linters
        run: make lint-api

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run tests with coverage
        run: make coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: ecommerce_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage/*.html
            coverage/*.txt
            frontend/coverage/lcov-report/

  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ./backend/products
          file: ./backend/products/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-products:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ./backend/cart
          file: ./backend/cart/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cart:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ./backend/order
          file: ./backend/order/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-order:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and push Helm charts
        run: |
          # Update chart versions
          for chart in k8s/helm/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              # For tags, use the tag version
              if [[ $GITHUB_REF == refs/tags/* ]]; then
                version=${GITHUB_REF#refs/tags/}
                version=${version#v}
              else
                # For PRs and main branch, use commit SHA
                version=$(echo ${{ steps.meta.outputs.version }} | cut -d'-' -f2)
              fi
              
              # Update Chart.yaml
              sed -i "s/^version: .*/version: $version/" "$chart/Chart.yaml"
              sed -i "s/^appVersion: .*/appVersion: \"$version\"/" "$chart/Chart.yaml"
              
              # Package chart
              helm package "$chart" -d ./charts
            fi
          done
          
          # Create index
          helm repo index ./charts
          
          # Push to GitHub Container Registry
          for chart in ./charts/*.tgz; do
            helm push "$chart" oci://ghcr.io/${{ github.repository }}/charts
          done 